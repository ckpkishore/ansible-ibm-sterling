---
- name: "Create Kubernetes Service {{ db2_id }}-ci"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ db2_id }}-ci"
        namespace: "{{ db2_namespace }}"
      spec:
        type: ClusterIP
        selector:
          app: "{{ db2_id }}"
        ports:
          - name: "{{ db2_id }}-ci-server"
            protocol: TCP
            port: 50000
            targetPort: 50000
          - name: "{{ db2_id }}-ci-ssl-server"
            protocol: TCP
            port: 50001
            targetPort: 50001

- name: "Create Kubernetes Service {{ db2_id }}-lb"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ db2_id }}-lb"
        namespace: "{{ db2_namespace }}"
      spec:
        selector:
          app: "{{ db2_id }}"
        type: LoadBalancer
        ports:
          - name: "{{ db2_id }}-lb-server"
            protocol: TCP
            port: 50000
            targetPort: 50000
          - name: "{{ db2_id }}-lb-ssl-server"
            protocol: TCP
            port: 50001
            targetPort: 50001

- name: "Create Kubernetes Route {{ db2_id }}-route"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: "{{ db2_id }}-route"
        namespace: "{{ db2_namespace }}"
      spec:
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: passthrough
        to:
          kind: Service
          name: "{{ db2_id }}-lb"
        wildcardPolicy: None

- name: Debug
  ansible.builtin.debug:
    msg: "image: icr.io/db2_community/db2:{{ db2_version }}"

# Deploy DB2 on Kubernetes
# -----------------------------------------------------------------------------     
- name: Deploy DB2 on Kubernetes
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: "{{ db2_id }}"
        namespace: "{{ db2_namespace }}"
      spec:
        selector:
          matchLabels:
            app: "{{ db2_id }}"
        serviceName: "{{ db2_id }}"
        replicas: 1
        template:
          metadata:
            labels:
              app: "{{ db2_id }}"
              app-instance: "{{ db2_instance_name | lower }}"
              app-dbname: "{{ db2_dbname | lower }}"
          spec:
            serviceAccount: "{{ db2_service_account }}"
            containers:
            - name: "{{ db2_id }}"
              securityContext:
                privileged: true
              image: "icr.io/db2_community/db2:{{ db2_version }}"
              env:
              - name: DB2INST1_PASSWORD
                valueFrom:
                  secretKeyRef: 
                    name: "{{ db2_secret }}"
                    key: DB2INST1_PASSWORD
              - name: LICENSE 
                value: accept 
              - name: DB2INSTANCE 
                value: "{{ db2_instance_name }}"
              ports:
              - containerPort: 50000
                name: "{{ db2_id }}-srv"
              - containerPort: 50001
                name: "{{ db2_id }}-srvs"
              imagePullPolicy: IfNotPresent
              volumeMounts:
              - mountPath: /database
                name: db2vol
              imagePullSecrets:
              - name: "{{ db2_registry_secret }}"
        volumeClaimTemplates:
        - metadata:
            name: db2vol
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 40Gi
            storageClassName: "{{ storage_class_matrix[ db2_storage_class ].rwo | default('') }}"
