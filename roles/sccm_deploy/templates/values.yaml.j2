# Default values for mychart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1 

# Control Center image details
image:
  repository: "cp.icr.io/cp/ibm-scc/ibmscc"
  tag: "{{ compatibility_matrix[sccm_version].image_tag }}"
  imageSecrets: "{{ sccm_registry_secret }}"
  digest:
    enabled:
    value:
  pullPolicy: IfNotPresent

# If you want to override the default full name( <release name>-ibm-sccm )
nameOverride: ""
fullnameOverride: ""

# Use name field if you want to override default name 
# Use create field as false if you want to manually create and give that service account name
serviceAccount:
  create: true
  name: ""

service:
  type: LoadBalancer
  loadBalancerIP: ""
  
  # Load Balancer sources
  # https://kubernetes.io/docs/concepts/services-networking/
  # E.g -
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24
  loadBalancerSourceRanges: []
  
  sessionAffinity: "ClientIP"
  swingConsole:
    name: "swing-console"
    port: 58080
    protocol: "TCP"
    # for network policy
    allowIngressTraffic: true
  webConsole:
    name: "web-console"
    port: 58082
    protocol: "TCP"
    # for network policy
    allowIngressTraffic: true
  swingConsoleSecure:
    name: "swing-console-secure"
    port: 58081
    protocol: "TCP"
    # for network policy
    allowIngressTraffic: true
  webConsoleSecure:
    name: "web-console-secure"
    port: 58083
    protocol: "TCP"
    # for network policy
    allowIngressTraffic: true
  externalIP: ""
  # Specify this to set annotations 
  annotations: {}
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: cm
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01  

ccArgs:
  appUserUID: "1010"
  ccInterval: "2h"
  # This variable will be used to drop tables for fresh install in dev environment
  devEnvDropTables: "false"
  #Use this flag to enable auto rebalance of monitored servers when scaled up
  enableAutoRebalanceServers: "true"

  #Control center database information
  #Specify engineNamePrefix for new install only and if you want to change engine name with this prefix, you have to run configcc manually
  engineNamePrefix: ""
  productEntitlement: "CCD,CCM"
  dbType: {{ sccm_dbvendor }}
  dbHost: {{ sccm_dbhost }}
  dbPort: {{ sccm_dbport }}
  dbUser: {{ sccm_dbuser }}
  dbName: {{ sccm_dbname }}
  dbLoc: "none"
  dbInit: "true"
  dbPartition: "false"
  dbDrivers: "{{ sccm_dbdriver_loc }}"
  #Globalization is only needed if data to be stored contains multi-byte characters, which are common in character sets such as Kanji.
  #Database I/O performance may drop multiple orders of magnitude if globalization support is selected, so it is NOT recommended you do so with MSSQL.
  #If you set true for mssqlGlobal variable, then your database size can also increase significantly.
  mssqlGlobal: "{{ sccm_mssqlglobal }}"
 
  autoStopJavaWebAppServer: "true"
  eventRepositoryAuth: "false"
  
  #Email related details
  emailHostname: "{{ sccm_emailhostname }}"
  emailPort: "{{ sccm_emailport }}"
  emailUser: "{{ sccm_emailuser }}"
  emailRespond: "{{ sccm_emailrespond }}"
  ccAdminEmailAddress: "{{ sccm_ccadmin_emailaddress }}"
  smtpTLSEnabled: "{{ sccm_smtp_tlsenabled }}"
  
  oracleRacOrScan: "{{ sccm_oracle_racorscan }}"
  
  #JMS related details if needed to post events to remote JMS system
  jmsEnable: ""
  jmsType: ""
  jmsHost: ""
  jmsPort: ""
  jmsQueueManager: ""
  jmsChannel: ""
  jmsSubject: ""
  jmsTopic: ""
  jmsEmbedBroker: ""
  jmsDataDirectory: ""
  jmsTimeToLive: ""
  jmsRetries: ""
  jmsRetryWait: ""
  jmsBrokerName: ""
  
  #Secure parameters
  dbSSL: ""
    
  # Keystore and truststore configuration
  keyStore: "/app/CC/user_inputs/CCenter.keystore"
  trustStore: "/app/CC/user_inputs/CCenter.truststore"
  keyAlias: "ccalias120"
  adminEmailAddress: "{{ sccm_ccadmin_emailaddress }}"

  #Seas Parameters
  packagePath: "../packages"
  seasPrimaryAddress: ""
  seasPrimaryPort: ""
  seasAlternativeAddress: ""
  seasAlternativePort: ""
  seasSecureConnection: "N"
  seasProfileName: "test"
  seasPersistentConnection: "N"
  seasSecureProtocol: ""

#From the given values 70% resources will be allocated to EP and remaining 20% will be allocated to webappserver
resources: 
  limits:
    cpu: 3000m
    memory: 8Gi
    ephemeral-storage: "4Gi"
  requests:
    cpu: 1500m
    memory: 4Gi
    ephemeral-storage: "2Gi"

initResources:
  limits:
    cpu: 500m
    memory: 2Gi
  requests:
    cpu: 250m
    memory: 1Gi

# Customer can use extra init containers to make 
# certain resources available for main container
# userInput's enabled should be true if user_input directory
# will be shared for resources like DB Drivers and certificates in waiting state
extraInitContainers:
 - name: "copy-resources"
   repository: "cp.icr.io/cp/ibm-scc/ibmscc"
   tag: "{{ compatibility_matrix[sccm_version].copy_resources_tag }}"
   imageSecrets: "scc-image-secret"
   pullPolicy: IfNotPresent
   command: "cp -r /jdbc_drivers/ /app/conf"
   digest:
     enabled: false
     value:
   userInput:
     enabled: false

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: {}
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

persistentVolumeCCM:
  enabled: true
  claimName: ""
  #if claim name is not given and enabled is true then next 3 parameters are required
  storageClassName: "{{ storage_class_matrix[ si_storage_class ].rwo | default('manual') }}"
  size: {{ sccm_helm_values.persistentVolumeCCM.size | default('100Mi') }} # 20Gi
  accessMode: "ReadWriteOnce"
  useDynamicProvisioning: true
  selector:
    label: "intent"
    value: "resources"

#persistence volume for resources like jdbc drivers
# can skip this if init conatiner is used for copying resources 
# or warpper image is used with required resources
persistentVolumeUserInputs:
  enabled: true
  claimName: ""
  #if claim name is not given and enabled is true then next 3 properties are required
  storageClassName: "manual"
  size: 2Gi
  accessMode: "ReadWriteOnce"
  selector:
    label: ""
    value: ""
    
# Manage Storage permission 
storageSecurity:
  # fsGroup -  Used for controlling access to block storage such as Ceph RBD, iSCSI, and some Cloud storage.
  fsGroup: ""
  # supplementalGroups - supplemental Groups IDs are used for controlling access to shared storage like NFS and GlusterFS
  # Replace supplementalGroup Id with NFS User's groupId if the root squash is enabled on NFS server otherwise volume access will fail
  supplementalGroups: [65534]
  
# liveness and Probeness
livenessProbe:
  initialDelaySeconds: 175
  timeoutSeconds: 45
  periodSeconds: 120

readinessProbe:
  initialDelaySeconds: 175
  timeoutSeconds: 15
  periodSeconds: 120
  
secret:
  # Secret with all passwords such as db and admin passwords
  secretName:  "{{ sccm_secret }}"
  # secret with keystore and truststore
  certsSecretName: "{{ sccm_cert_secret }}"

# for ibm cloud environment
dashboard:
  enabled: "{{ sccm_dashboard }}"

# applicable for openshift environment for accessing UI 
route:
  enabled: "{{ sccm_oc_route }}"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

arch: "amd64"

license: true

licenseType: "{{ sccm_licensetype }}"

# Set network policy
# https://kubernetes.io/docs/concepts/services-networking/network-policies/
# Default ingress policy will be created from Service object of values if no custom ingress policy is specified
networkPolicy:
  policyTypes:
    - Ingress
    - Egress
  # apply ingress rule. Default allow all ingress traffic
  # ingress:
  #   - {}
  # apply egress rule. Default allow all egress traffic 
  egress: 
    - {}
  
# can be used when ingress controller is available
# can be used for rule based access 
# TLS related configuration is requierd if passthrough termination is not used
ingress:
  enabled: false
  host: ""
  controller: "nginx"
  annotations: {}
  tls:
    enabled: false
    secretName: ""

# Pod Disruption Budget configuration details
defaultPodDisruptionBudget:
  enabled: false
  minAvailable: 1

# secure computing mode(seccomp) settings, default type is RuntimeDefault, 
# if type is other than RuntimeDefault then profile value must be given
secComp:
  type: RuntimeDefault
  profile: ""

#set timezone of container
timeZone: "America/New_York"

# For troubleshooting purpose only
debugScripts: true
