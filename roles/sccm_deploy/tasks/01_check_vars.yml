---
- name: Check for required environment variables
  ansible.builtin.assert:
    that:
      # Sterling B2B
      - lookup('env', 'SCCM_INSTANCEID') != ""
      - lookup('env', 'SCCM_DOMAIN') != ""
      # IBM Registry
      - lookup('env', 'ENTITLED_REGISTRY_KEY') != ""
    fail_msg: "One or more required environment variables are not defined"

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail sccm_instanceid is 'not provided' or 'over 8 characters' or 'has uppercase characters'"
  ansible.builtin.assert:
    that:
      - sccm_instanceid is defined and sccm_instanceid != ""
      - sccm_instanceid | length <= 8
      - sccm_instanceid is match('[a-z0-9]+')
    fail_msg: "Property 'sccm_instanceid' is greater than 8 character long or has uppercase characters"

- name: "Fail if entitled_registry_key is not provided"
  ansible.builtin.assert:
    that: entitled_registry_key is defined and entitled_registry_key != ""
    fail_msg: "entitled_registry_key property is required"

- name: "Fail sccm_domain is 'not provided' "
  ansible.builtin.assert:
    that:
      - sccm_domain is defined and sccm_domain != ""
    fail_msg: "sccm_domain property is required"

# 2. Lookup Namespace availabiity
# -----------------------------------------------------------------------------
- name: Lookup Namespaces
  kubernetes.core.k8s_info:
    kind: Namespace
  register: lookup_namespaces

- name: Create List of Namespaces
  ansible.builtin.set_fact:
    namespace_list: "{{ lookup_namespaces.resources | map(attribute='metadata.name') | list }}"

# 3. Check for DB Information
# -----------------------------------------------------------------------------
- name: Check for DB2 provided namespace
  ansible.builtin.set_fact:
    db2_namespace: "{{ env_db2_namespace }}"
  when:
    - env_db2_namespace is defined and env_db2_namespace != ""
    - env_db2_namespace in namespace_list

- name: Check for DB2 default namespace
  ansible.builtin.set_fact:
    db2_namespace: "{{ sccm_db2_namespace }}"
  when:
    - db2_namespace == ""
    - sccm_db2_namespace in namespace_list

- name: "Fail if Database Information is not provided"
  ansible.builtin.assert:
    that:
      - (db2_namespace != "") or (sccm_dbvendor != "")
    fail_msg: "Database Information property is required"

# Debug
# -----------------------------------------------------------------------------
- name: Debug
  ansible.builtin.debug:
    msg:
      - "SCCM Instance ID  .............. {{ sccm_instanceid }}"
      - "SCCM namespace ................. {{ sccm_namespace }}"
      - "Database Namespace ........... {{ db2_namespace }}"
