license: true
licenseType: "{{ ssp_cm_license_type }}"

nameOverride: ""
arch: "amd64"
timezone: "UTC"

# Specify the respective Docker Image details for IBMCCS
image:
  repository:  "{{ compatibility_matrix[ssp_cm_version].image_repository }}"
  tag: "{{ compatibility_matrix[ssp_cm_version].image_tag }}"
  imageSecrets: "{{ ssp_cm_registry_secret }}"
  digest:
    enabled: false
    value: "" 
  pullPolicy: IfNotPresent


cmArgs:
   # Set the value "true" to Generate Key Certificate, if you are installing Secure Proxy CM first.
   # Set the value "false" to Import Key Cert Exported from Secure Proxy Engine if you have installed Secure Proxy Engine first.
{% if (ssp_cm_generate_certificates) %}
  keyCertExport: true
{% else %}
  keyCertExport: false
  # Set the certificate alias value. 
  keyCertAliasName: "keycert"
{% endif %}
  # JVM max heap size - don't set more than container limit resource memory. 
  maxHeapSize: "2048m"
  # Enable/Disable host name verification
  # Set to false, will bypass the host header check. 
  hostNameVerification: false
  # Following property is mandatory if you are enabling host name verification. 
  # Specify comma delimited host names and IP addresses which can be used by users accessing CM thru browser.  
  hostNames: ""
  # Enable/Disable - SSP CM OSA Node Name to be used for CCM monitoring
  # In Node Name container will add Pod name  
  osaNodeEnable: false


persistentVolume:
  enabled: true
  useDynamicProvisioning: true
  existingClaimName: ""
  labelName: ""
  labelValue: ""
  storageClassName: "{{ storage_class_matrix[ ssp_cm_storage_class ].rwo }}"
  size: {{ ssp_cm_storage_capacity }}
  accessMode: "ReadWriteOnce"    

storageSecurity:
  fsGroup: 65534
  supplementalGroups: [65534]
  
service:
  type: "LoadBalancer"
  loadBalancerIP: "" 
  externalIP: ""
  annotations: {}
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: cm
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01
    
  externalTrafficPolicy: ""
  sessionAffinity: "ClientIP"
  jetty: 
    servicePort: 8443
    containerPort: 8443
  cm: 
    servicePort: 62366
    containerPort: 62366

secret:
  secretName: "{{ ssp_cm_secret }}"
{% if (ssp_cm_generate_certificates) %}
  keyCertSecretName: ""
{% else %}
  keyCertSecretName: "{{ ssp_cm_keycert_secret }}"
{% endif %}

serviceAccount:
  create: true
  name: "" 

resources:
  limits:
    cpu: {{ ssp_cm_cpu_limits }}
    memory: {{ ssp_cm_mem_limits }}
    ephemeral-storage: {{ ssp_cm_ephemeral_storage_limits }}
  requests:
    cpu: {{ ssp_cm_cpu_requests }}
    memory: {{ ssp_cm_mem_requests }}
    ephemeral-storage: {{ ssp_cm_ephemeral_storage_requests }}

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: kubernetes.io/e2e-az-name
  #        operator: In
  #        values:
  #        - e2e-az1
  #        - e2e-az2
# The matchExpression for key 'kubernetes.io/arch' is automatically added based on
# architecture preference specified in 'arch'
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

livenessProbe:
  initialDelaySeconds: 175
  timeoutSeconds: 30
  periodSeconds: 60
  failureThreshold: 10

readinessProbe:
  initialDelaySeconds: 170
  timeoutSeconds: 5
  periodSeconds: 60
  failureThreshold: 10

route:
  enabled: true
  
# Set this to true to create Monitoring Dashboard for IBMCCS
dashboard:
  enabled: false
  
# The following files can be customized using key value pair in the list format.
# conf/log4j.properties, bin/log.properties, bin/security.properties, bin/vendor.properties 
# Add/Update: Key and Value both must be provided in the below format.
# <File Name Without Extension>_<Property Name>=<Property Value>
customProperties: []
# below is the example: 
#customProperties:
#  - log4j_log4j.logger.org.apache.commons.beanutils=OFF
#  - log_audit.log.maxfilesize=10MB


# Add/Update VM arguments in the list format
# <Key as Java property name>=<value>
vmArguments: []
# below is the example: 
#vmArguments:
#  - Dssp.cm.jetty.sni.enable=false
#  - DvalidateThruXSD=false
#  - DsspcmDisableClientEndpointIdentification=true


# Set custom certificate   
customCertificate:
  # Common key-certificate for all components of SSP.
  # The Engine, CM, web server, and servlet will use this key-certificate.
  commonCert:
    # Enable/Disable common cert
    enabled: false
    # Secret name of common certificate
    secretName: ""
    # Alias for common certificate
    alias: ""
    # Custom key cert file will be exported with below name under container and it will be imported into the Engine.
    exportFileName: "exportCommonCert.txt"
    
  # Key-certificate for CM, web server, and servlet
  cmCert:
    # Enable/Disable CM cert
    enabled: false
    # Secret name of CM certificate
    secretName: ""
    # Alias for CM certificate
    alias: ""
   
  # Key-certificate for CM server connection to servlet.   
  cmServerCert:
    # Enable/Disable CM Server cert
    enabled: false
    # Secret name of CM Server certificate
    secretName: ""
    # Alias for CM Server certificate
    alias: ""
    
  # Key-certificate for Engine.
  # Use this option when the Engine should use its own key-certificate.
  engCert:    
    # Enable/Disable engine cert
    enabled: false
    # Secret name of engine certificate
    secretName: ""
    # Alias for engine certificate
    alias: ""
    # Engine key cert file will be exported with below name under container and it will be imported into the Engine.
    exportFileName: "exportEngineCert.txt"

  # Key-certificate for CM client connection to Engine
  cmClientCert:
   # Enable/Disable CM Client cert
    enabled: false
    # Secret name of CM Client certificate
    secretName: ""
    # Alias for CM Client certificate
    alias: ""
    # CM Client key cert file will be exported with below name under container and it will be imported into the Engine.
    exportFileName: "exportCMClientCert.txt"
  
  # Key-certificate for web server.  
  webCert:
   # Enable/Disable web cert
    enabled: false
    # Secret name of web certificate
    secretName: ""
    # Alias for web certificate
    alias: ""
    
  # Enable client authentication on web server - Enabled priority is more than disabled.
  clientAuth:
    # Enable client Authentication 
    enabled: false
    # Disable client Authentication
    disabled: false
    # Secret Name of trusted certificate to add in web server trust store
    trustedCertSecretName: ""
    # Certificate alias for Jetty web server trusted certificate
    certCAAlias: ""
  
  # Protocol and Cipher suites for CM 
  cmSSL:
    # Enable/Disable for update
    enabled: false
    # SSL/TLS protocol for CM.
    protocol: "TLSv1.2"
    # Cipher suites for CM and Separate cipher suites with semi colon.
    ciphers: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;TLS_RSA_WITH_AES_256_GCM_SHA384;TLS_RSA_WITH_AES_128_GCM_SHA256"
    # CM SSL changes key cert file will be exported with below name under container and it will be imported into the Engine.
    exportFileName: "exportCMSSLCert.txt"
  
  # Protocol and Cipher suites for Jetty web server 
  webSSL:
    # Enable/Disable for update
    enabled: false
    # SSL/TLS protocol for web server.
    protocol: "TLSv1.2"
    # Cipher suites for web server and Separate cipher suites with semi colon.
    ciphers: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;TLS_RSA_WITH_AES_256_GCM_SHA384;TLS_RSA_WITH_AES_128_GCM_SHA256"


# The custom directories/files can be mapped using the list format.
# For mapping, We need to provide full path of the file or directory. 
# First we need to create the directory with 'CM_RESOURCES' name if it is not available into PV. 
# and keep the custom directories/files into created directory. 
customFiles: []
# In the below example we need to keep log4j2.xml file inside 'CM_RESOURCES' directory.
# so that the container will copy this file into respective directory.   
#customFiles:
#  - /conf/log4j2.xml

# Set network policy
# https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # apply policy type
  policyTypes:
  - Ingress
  - Egress
  
  # apply ingress rule.
  ingress:
  - from:
    ports:
    - protocol: TCP
      port: 8443
    - protocol: TCP
      port: 62366
      
  # apply egress rule.
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 63366  
