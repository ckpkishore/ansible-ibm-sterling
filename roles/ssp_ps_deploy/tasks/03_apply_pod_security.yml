---
- name: "Cleanup directories and files"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ my_workdir }}/ibm-ssp-ps-{{ compatibility_matrix[ssp_ps_version].helm_version }}.tgz"
    - "{{ my_workdir }}/myssp_ps_values.yml"

- name: "Download Helm chart"
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/IBM/charts/master/repo/ibm-helm/ibm-ssp-ps-{{ compatibility_matrix[ssp_ps_version].helm_version }}.tgz"
    dest: "{{ my_workdir }}/ibm-ssp-ps-{{ compatibility_matrix[ssp_ps_version].helm_version }}.tgz"
    mode: "0640"
  register: download_cout
  until: download_cout is succeeded
  retries: 3

# Check for Kubernetes Resources and APIs
# -----------------------------------------------------------------------------
- name: Get Cluster information
  kubernetes.core.k8s_cluster_info:
  register: k8s_cl_info

- name: Check for SCC Resource
  ansible.builtin.set_fact:
    scc_resource: false
    scc_apiversion: false
    psp_resource: false
    psp_apiversion: false

- name: Check for SCC Resource
  ansible.builtin.set_fact:
    scc_resource: true
  when: "'security.openshift.io/v1' in k8s_cl_info.apis"

- name: Check if SCC API version
  ansible.builtin.set_fact:
    scc_apiversion: true
  when:
    - scc_resource
    - "'SecurityContextConstraints' in k8s_cl_info.apis['security.openshift.io/v1']"

- name: Check for PSP Resource
  ansible.builtin.set_fact:
    psp_resource: true
  when: "'policy/v1beta1' in k8s_cl_info.apis"

- name: Check if PSP API version
  ansible.builtin.set_fact:
    psp_apiversion: true
  when:
    - psp_resource
    - "'PodSecurityPolicy' in k8s_cl_info.apis['policy/v1beta1']"

# Debug
# -----------------------------------------------------------------------------
- name: Debug Apply Pod Security
  ansible.builtin.debug:
    msg:
      - "scc_resource ................. {{ scc_resource }}"
      - "scc_apiversion ............... {{ scc_apiversion }}"
      - "psp_resource ................. {{ psp_apiversion }}"
      - "psp_apiversion ............... {{ psp_apiversion }}"

# Creating Pod Security Policy for Kubernetes Cluster
# -----------------------------------------------------------------------------
- name: Creating Security Context Constraints
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/clusterAdministration/ibm-ssp-ps-scc.yaml') | from_yaml }}"
  when: scc_resource and scc_apiversion

- name: Creating Cluster Role
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/clusterAdministration/ibm-ssp-ps-cr-scc.yaml') | from_yaml }}"
  when: scc_resource and scc_apiversion

- name: Adding all namespace users to SCC...
  kubernetes.core.k8s:
    state: present
    template: 'namespaceAdministration/ibm-ssp-ps-rb-scc.yaml.j2'
  when: scc_resource and scc_apiversion

# Creating security context constraints for OpenShift Cluster
# -----------------------------------------------------------------------------
- name: Creating Pod Security Policy
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'clusterAdministration/ibm-ssp-ps-psp.yaml') | from_yaml }}"
  when: psp_resource and psp_apiversion

- name: Creating Cluster Role
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'clusterAdministration/ibm-ssp-ps-cr.yaml') | from_yaml }}"
  when: psp_resource and psp_apiversion

- name: Adding a RoleBinding for all namespace users to the PSP...
  kubernetes.core.k8s:
    state: present
    template: 'namespaceAdministration/ibm-ssp-ps-rb.yaml.j2'
  when: psp_resource and psp_apiversion
