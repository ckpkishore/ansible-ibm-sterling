license: true
licenseType: "{{ ssp_ps_license_type }}"

timezone: "UTC"
timezone: "UTC"

# Specify the respective Docker Image details for IBMCCS
image:
  repository:  "{{ compatibility_matrix[ssp_ps_version].image_repository }}"
  tag: "{{ compatibility_matrix[ssp_ps_version].image_tag }}"
  imageSecrets: "{{ ssp_ps_registry_secret }}"
  digest:
    enabled: false
    value: "" 
  pullPolicy: IfNotPresent

nameOverride: ""
# Currently, the only supported architecture for IBMCCS is `amd64`
arch: "amd64"


# Specify these fields to provide config values for Perimeter Server application
psArgs:
  # true - The Perimeter Server will be installed in more-secure zone
  # false - The Perimeter Server will be installed in less-secure zone
  networkZoneSecure: false
  # Secure Network Interface - The perimeter server to use to communicate with the Secure Proxy engine.
  secureInterface: "*"
   # External Network Interface - The perimeter server to use to communicate with the backend serve / trading partners.
  externalInterface: "*"
  # Remote port number - The Secure Proxy engine will listen on for requests from the perimeter server.
  # Required for More secure Perimeter Server  
  remotePort: 30900
  # Remote HostName/IP address - The Secure Proxy engine host that will be connected to this perimeter server.
  # Required for More secure Perimeter Server
  remoteAddress: ""

  # maxAllocation - Limits the amount of memory used for network buffers.
  maxAllocation: 768
  # maxHeapSize - JVM heap size, don't set more than container limit resource memory. 
  maxHeapSize: 1024
  # restricted - set to true to enable restricted network access, controlled by restricted.policy
  # Required for More secure Perimeter Server 
  restricted: false
  # receiveBufferSize - socket receive buffer size for persistent connection
  receiveBufferSize: 131072
  # sendBufferSize - socket send buffer size for persistent connection
  sendBufferSize: 131072
  # logLevel - May have values of (ERROR,WARN,INFO,COMMTRACE,DEBUG or ALL)
  logLevel: "ERROR"
  # rotateLogs - enables log rotation when maxLogSize is reached.
  rotateLogs: true
  # maxLogSize - log output will roll over when this many records have been written
  maxLogSize: 100000
  # maxnumLogs - after this many logs are written, old logs will be deleted.
  maxnumLogs: 10  

# Specify these fields for Services
service:
  # Specify this to set service type.
  type: "LoadBalancer"
    # Specify this to set load balancer IP. It's added for cloud environment.
  loadBalancerIP: "" 
  # Specify this to set external IP to access application outside the cluster.
  externalIP: ""
  # Specify this to set annotations 
  annotations: {}
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: ps
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01
    
  # Specify this to set external traffic policy 
  externalTrafficPolicy: ""
  # Specify this to set session Affinity
  sessionAffinity: "ClientIP"
  psLessSecure: 
    # Less Secure Perimeter Server application is accessed by using below mentioned service port, 
    # so add port as per the requirement else it would be set 30800 as default port.
    servicePort: 30800
    # It is not required to change the container port value. 
    containerPort: 30800
    
# Specify these fields for Adapter Services
# if you want to preserve client source IP then define service type as NodePort and externalTrafficPolicy as Local
service2:
  # Specify this to set service type.
  type: "LoadBalancer"
  # Specify this to set load balancer IP. It's added for cloud environment.
  loadBalancerIP: "" 
  externalIP: ""
  annotations: {}
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: public
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-name: ps
    #service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: main01
    
  externalTrafficPolicy: ""
  sessionAffinity: "ClientIP"
  
  # Expose adapter ports in range format if we are using Less Secure Perimeter Server.
  # nodePortRange - it will assign to service if you have selected service type as NodePort. 
  portRanges: []
    #- name: ftp-adapter
     # portRange: 30101-30110
     # nodePortRange: 30101-30110
    #- name: sftp-adapter
     # portRange: 30201-30210
     # nodePortRange: 30201-30210
      
  # Expose adapter ports one by one if we are using Less Secure Perimeter Server.
  # nodePort - it will assign to service if you have selected service type as NodePort.
  ports: []
    #- name: adapter1
     # port: 30110
     # nodePort: 30110
    #- name: adapter2
     # port: 30111 
     # nodePort: 30111
    #- name: adapter3
     # port: 30112    
     # nodePort: 30112 


# Specify the service account details
serviceAccount:
  create: true
  name: "" 

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: "5Gi"
  requests:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: "3Gi"

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: kubernetes.io/e2e-az-name
  #        operator: In
  #        values:
  #        - e2e-az1
  #        - e2e-az2
# The matchExpression for key 'kubernetes.io/arch' is automatically added based on
# architecture preference specified in 'arch'
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

# liveness and readiness Probe
livenessProbe:
  initialDelaySeconds: 150
  timeoutSeconds: 30
  periodSeconds: 60
  failureThreshold: 10

readinessProbe:
  initialDelaySeconds: 140
  timeoutSeconds: 5
  periodSeconds: 60
  failureThreshold: 10

# Set this to true to create route in OpenShift cluster
route:
  enabled: false
  
# Set this to true to create Monitoring Dashboard for IBMCCS
dashboard:
  enabled: false

# Set network policy
# https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # apply policy type
  policyTypes:
  - Ingress
  - Egress
  
  # apply ingress rule. Default allow all ingress traffic.
  ingress:
  - from:
    ports:
    - protocol: TCP
      port: 30800
    - protocol: TCP
      port: 30900
      
  # apply egress rule. Default allow all egress traffic 
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 63366
   
      

