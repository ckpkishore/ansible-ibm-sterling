#!/bin/sh

source /database/config/{{ db2_user }}/sqllib/db2profile

function db2_verify_and_start {

    if ! db2gcf -s | grep Available >/dev/null; then

        db2_kill
        db2_k=$?

        ipclean -a

        db2start
        db2_start=$?
        
        echo ""
        echo "db2_verify_and_start: db2_kill=$db2_k |db2start=$db2_start "
        if [ "$db2_start" -ne  "0" ]; then
            echo "db2_verify_and_start: ERROR - error detected "
            exit 1
        fi

        echo ""
        echo "db2_verify_and_start: Check if DB2 is Available "
        counter=0
        max_checks=5
        interval=30

        while [ $counter -lt $max_checks ]; do
            if db2gcf -s | grep Available >/dev/null; then
                echo "db2_verify_and_start: DB2 is Available "
                break  # Exit loop if condition is met
            else
                echo "db2_verify_and_start: DB2 is starting. Waiting $interval seconds before next check... "
                sleep $interval
                counter=$((counter + 1))
            fi
        done

        if [ $counter -eq $max_checks ]; then
            echo "db2_verify_and_start: ERROR: DB2 is NOT Available. Please check. "
            exit 2
        fi

    fi

}



function create_sccm_db {

cat << EOF > /tmp/create_sccm_db2.sql
CREATE DATABASE SCCM AUTOMATIC STORAGE YES USING CODESET UTF-8 TERRITORY US COLLATE USING SYSTEM PAGESIZE 32768;

CONNECT TO SCCM;
CREATE BUFFERPOOL SCCM_04KBP IMMEDIATE SIZE 1000 PAGESIZE 4K;
CREATE BUFFERPOOL SCCM_08KBP IMMEDIATE SIZE 1000 PAGESIZE 8K;
CREATE BUFFERPOOL SCCM_16KBP IMMEDIATE SIZE 1000 PAGESIZE 16K;
CONNECT RESET;

CONNECT TO SCCM;
CREATE USER TEMPORARY TABLESPACE SCCMUSERTMP PAGESIZE 32K BUFFERPOOL IBMDEFAULTBP;
CREATE REGULAR TABLESPACE TS_REG04_SCCM PAGESIZE 4K BUFFERPOOL SCCM_04KBP;
CREATE REGULAR TABLESPACE TS_REG08_SCCM PAGESIZE 8K BUFFERPOOL SCCM_08KBP;
CREATE REGULAR TABLESPACE TS_REG16_SCCM PAGESIZE 16K BUFFERPOOL SCCM_16KBP;
CONNECT RESET;
EOF

    echo ""
    if [ ! -f "/tmp/create_sccm_db2.sql" ]; then
        echo "create_sccm_db: ERROR - Cannot generate create_sccm_db2.sql "
        exit 1
    fi
    
    echo "create_sccm_db: File /tmp/create_sccm_db2.sql created sucessfully "

    db2 -tvf /tmp/create_sccm_db2.sql -z /tmp/create_sccm_db2.sql.log 
    db2_crdb=$?

    echo ""
    echo "create_sccm_db: $db2_crdb"
    if [ $db2_crdb -ne 0 ]; then
        echo "create_sccm_db: ERROR - Failed to run 'db2 -tvf create_sccm_db2.sql' "
        exit 2
    fi

    echo "create_sccm_db: run 'db2 -tvf create_sccm_db2.sql' sucessfully"
}

function create_sccd_db {

cat << EOF > /tmp/create_sccd_db2.sql
CREATE DATABASE SCCD AUTOMATIC STORAGE YES USING CODESET UTF-8 TERRITORY US COLLATE USING SYSTEM PAGESIZE 32768;

CONNECT TO SCCD;
CREATE BUFFERPOOL SCCD_04KBP IMMEDIATE SIZE 1000 PAGESIZE 4K;
CREATE BUFFERPOOL SCCD_08KBP IMMEDIATE SIZE 1000 PAGESIZE 8K;
CREATE BUFFERPOOL SCCD_16KBP IMMEDIATE SIZE 1000 PAGESIZE 16K;
CONNECT RESET;

CONNECT TO SCCD;
CREATE USER TEMPORARY TABLESPACE SCCDUSERTMP PAGESIZE 32K BUFFERPOOL IBMDEFAULTBP;
CREATE REGULAR TABLESPACE TS_REG04_SCCD PAGESIZE 4K BUFFERPOOL SCCD_04KBP;
CREATE REGULAR TABLESPACE TS_REG08_SCCD PAGESIZE 8K BUFFERPOOL SCCD_08KBP;
CREATE REGULAR TABLESPACE TS_REG16_SCCD PAGESIZE 16K BUFFERPOOL SCCD_16KBP;
CONNECT RESET;
EOF

    echo ""
    if [ ! -f "/tmp/create_sccd_db2.sql" ]; then
        echo "create_sccd_db: ERROR - Cannot generate create_sccd_db2.sql "
        exit 1
    fi
    
    echo "create_sccd_db: File /tmp/create_sccd_db2.sql created sucessfully "

    db2 -tvf /tmp/create_sccd_db2.sql -z /tmp/create_sccd_db2.sql.log 
    db2_crdb=$?

    echo ""
    echo "create_sccd_db: $db2_crdb"
    if [ $db2_crdb -ne 0 ]; then
        echo "create_sccd_db: ERROR - Failed to run 'db2 -tvf create_sccd_db2.sql' "
        exit 2
    fi

    echo "create_sccd_db: run 'db2 -tvf create_sccd_db2.sql' sucessfully"
}

function apply_settings_sccm {

    echo ""

    db2 connect to SCCM
    db2_ct=$?

    if [ $db2_ct -ne 0 ]; then
        echo "apply_settings_sccm: ERROR - Failed to connect to db2"
        exit 1
    fi

    echo "apply_settings_sccm: connected to SCCM sucessfully"

    db2 update db cfg for SCCM using CATALOGCACHE_SZ 300;
    db2_updb_1=$?

    db2 update db cfg for SCCM using UTIL_HEAP_SZ AUTOMATIC;
    db2_updb_2=$?

    db2 update db cfg for SCCM using CHNGPGS_THRESH 80;
    db2_updb_3=$?


    echo "apply_settings_sccm: db2 update db2_updb_1=$db2_updb_1 | db2_updb_2=$db2_updb_2 | db2_updb_3=$db2_updb_3 "
    # if [ "$db2_updb_1" -ne 0 ] || [ "$db2_updb_2" -ne 0 ] || [ "$db2_updb_3" -ne 0 ]
    # then
    #     echo "apply_settings_sccm: ERROR - Failed to start to db2"
    #     exit 2
    # fi

    db2 connect reset
    db2_cr=$?

    echo ""
    echo "apply_settings_sccm: conreset=$db2_cr "
    if [ "$db2_cr" -ne 0 ]
    then
        echo "apply_settings_sccm: ERROR - conreset "
        exit 3
    fi
    echo "apply_settings_sccm: finished sucessfully "
}


function apply_settings_sccd {

    echo ""

    db2 connect to SCCD
    db2_ct=$?

    if [ $db2_ct -ne 0 ]; then
        echo "apply_settings_sccd: ERROR - Failed to connect to db2"
        exit 1
    fi

    echo "apply_settings_sccd: connected to SCCD sucessfully"

    db2 update db cfg for SCCD using CATALOGCACHE_SZ 300;
    db2_updb_1=$?

    db2 update db cfg for SCCD using UTIL_HEAP_SZ AUTOMATIC;
    db2_updb_2=$?

    db2 update db cfg for SCCD using CHNGPGS_THRESH 80;
    db2_updb_3=$?

    echo "apply_settings_sccd: db2 update db2_updb_1=$db2_updb_1 | db2_updb_2=$db2_updb_2 | db2_updb_3=$db2_updb_3 "
    # if [ "$db2_updb_1" -ne 0 ] || [ "$db2_updb_2" -ne 0 ] || [ "$db2_updb_3" -ne 0 ]
    # then
    #     echo "apply_settings_sccd: ERROR - Failed to start to db2"
    #     exit 2
    # fi


    db2 connect reset
    db2_cr=$?

    echo ""
    echo "apply_settings_sccd: db2 restart conreset=$db2_cr "
    if [ "$db2_cr" -ne 0 ]
    then
        echo "apply_settings_sccd: ERROR - conreset "
        exit 3
    fi
    echo "apply_settings_sccd: finished sucessfully "
}


function config_settings {

    db2set DB2_PARALLEL_IO=ON
    db2_pi=$?

    db2set DB2_SKIPDELETED=ON;
    db2_sd=$?

    db2set DB2_SKIPINSERTED=ON;
    db2_si=$?

    db2set DB2_USE_ALTERNATE_PAGE_CLEANING=ON;
    db2_uapc=$?

    db2set DB2_EVALUNCOMMITTED=ON;
    db2_eu=$?

    db2set DB2LOCK_TO_RB=STATEMENT;
    db2_lock=$?

    echo ""
    echo "db2set DB2COMM=TCPIP"
    db2set DB2COMM=TCPIP
    db2_comm=$?

    echo ""
    echo "db2 update dbm cfg to svcename 50000;"
    db2 update dbm cfg using svcename 50000;
    db2_svcename=$?

    # db2 update dbm cfg using DFT_MON_BUFPOOL ON;
    # db2 update dbm cfg using DFT_MON_LOCK ON;
    # db2 update dbm cfg using DFT_MON_SORT ON;
    # db2 update dbm cfg using DFT_MON_STMT ON;
    # db2 update dbm cfg using DFT_MON_TABLE ON;
    # db2 update dbm cfg using DFT_MON_TIMESTAMP ON;
    # db2 update dbm cfg using DFT_MON_UOW ON;
    # db2 update dbm cfg using MON_HEAP_SZ AUTOMATIC;

    echo "config_settings: db2_pi=$db2_pi | db2_sd=$db2_sd | db2_si=$db2_si | db2_uapc=$db2_uapc | db2_eu=$db2_eu | db2_lock=$db2_lock | db2_comm=$db2_comm | db2_svcename=$db2_svcename " 
    if [ "$db2_pi" -ne 0 ] || [ "$db2_sd" -ne 0 ] || [ "$db2_si" -ne 0 ] || [ "$db2_uapc" -ne 0 ] || [ "$db2_eu" -ne 0 ] || [ "$db2_lock" -ne 0 ] 
    then
        echo "config_settings: ERROR - error detected "
        exit 1
    fi

    if [ "$db2_comm" -ne 0 ] 
    then
        echo "config_settings: ERROR - error detected DB2COMM"
        exit 2
    fi
    # || [ "$db2_svcename" -ne 0 ]


    db2 terminate
    db2_t=$?

    db2 force applications all
    db2_fal=$?

    echo "Run db2stop"
    db2stop
    db2_stop=$?

    echo "Run db2start"
    db2start
    db2_start=$?

    echo ""
    echo "apply_settings: terminate=$db2_t | forceapp=$db2_fal | db2stop=$db2_stop | db2start=$db2_start "
    if [ "$db2_t" -ne 0 ] || [ "$db2_fal" -ne 0 ] || [ "$db2_stop" -ne 0 ] || [ "$db2_start" -ne 0 ]
    then
        echo "apply_settings: ERROR - Failed to start to db2 "
        exit 3
    fi

    echo ""
    echo "apply_settings: Check if DB2 is Available "
    counter=0
    max_checks=5
    interval=30

    while [ $counter -lt $max_checks ]; do
        if db2gcf -s | grep Available >/dev/null; then
            echo "apply_settings: DB2 is Available "
            break  # Exit loop if condition is met
        else
            echo "apply_settings: DB2 is starting. Waiting $interval seconds before next check... "
            sleep $interval
            counter=$((counter + 1))
        fi
    done

    if [ $counter -eq $max_checks ]; then
        echo "apply_settings: ERROR: DB2 is NOT Available. Please check. "
        exit 2
    fi


    echo "apply_settings: finished sucessfully "
}

########################## Main Part of Shell Script ##########################
echo "Start of script setupdb.sh"
echo ""

echo "Starting db2 - db2_verify_and_start"
db2_verify_and_start
echo ""


# Steps for SCC Monitor
# -----------------------------------------------------------------------------
{% if scc_install_monitor %}
echo "Creating IBM Sterling Control Center Database - create_sccm_db"
create_sccm_db
echo ""

echo "Applying settings to DB2 - apply_settings_sccm"
apply_settings_sccm
echo ""
{% endif %}


# Steps for SCC director
# -----------------------------------------------------------------------------
{% if scc_install_director %}
echo "Creating IBM Sterling Control Center Database - create_sccd_db"
create_sccd_db
echo ""

echo "Applying settings to DB2 - apply_settings_sccd"
apply_settings_sccd
echo ""
{% endif %}


# Steps for General
# -----------------------------------------------------------------------------
echo "Define Config settings to DB2 - config_settings"
config_settings
echo ""

echo "SUCCESS" > /database/config/{{ db2_user }}/CREATEDB.OUT
echo "End of script setupdb.sh "
