---
# Usage Examples
# -----------------------------------------------------------------------------
# - name: Create Red Hat Certificate Manager Subscription
#   include_tasks: "tasks/common_tasks/create_subscription.yml"
#   vars:
#     subscription_namespace: "{{ cert_manager_operator_namespace }}"
#     package_name: openshift-cert-manager-operator
#     channel_name: stable-v1

# Optionally provide a config object as well:
#
# - name: "install : Create Grafana v5 Subscription"
#   include_tasks: "{{ role_path }}/../../common_tasks/create_subscription.yml"
#   vars:
#     package_name: grafana-operator
#     channel_name: v5
#     subscription_namespace: "{{ grafana_v5_namespace }}"
#     subscription_config:
#       env:
#         - name: "WATCH_NAMESPACE"
#           value: ""
#         - name: "DASHBOARD_NAMESPACES_ALL"
#           value: "true"


# 1. Validate inputs
# -----------------------------------------------------------------------------
- name: "Create_subscription: Assert that PackageManifest exists"
  ansible.builtin.assert:
    that:
      - package_name is defined and package_name != ""
      - subscription_namespace is defined and subscription_namespace != ""
    fail_msg: "Unable to create subscription: package_name and subscription_namespace variables must both be set"


# 2. Lookup Required Subscription Information
# -----------------------------------------------------------------------------
- name: "Create_subscription : Get package manifest"
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "{{ package_name }}"
    # Note: A namespace must be provided when calling packages.operators.coreos.com/v1
    namespace: openshift-marketplace
  register: _manifest

- name: "Create_subscription: Assert that PackageManifest exists"
  ansible.builtin.assert:
    that:
      - _manifest is defined
      - _manifest.resources is defined
      - _manifest.resources | length == 1
    fail_msg: "Unable to create subscription, packageManifest not found: {{ package_name }}"

- name: "Create_subscription : Set the subscription information"
  ansible.builtin.set_fact:
    _source: "{{ _manifest.resources[0].status.catalogSource }}"
    _source_namespace: "{{ _manifest.resources[0].status.catalogSourceNamespace }}"
    _default_channel: "{{ _manifest.resources[0].status.defaultChannel }}"

- name: "Create_subscription: Use default channel if none is provided"
  when: channel_name is not defined or channel_name == ""
  ansible.builtin.set_fact:
    channel_name: "{{ _default_channel }}"


# 3. Determine whether a new OperatorGroup must be created
# -----------------------------------------------------------------------------
- name: "Create_subscription: Check if operator group is present in {{ subscription_namespace }} namespace"
  kubernetes.core.k8s_info:
    namespace: "{{ subscription_namespace }}"
    kind: OperatorGroup
  register: _og_info


# 4. Create Subscription
# -----------------------------------------------------------------------------
- name: "Create_subscription: Debug settings"
  ansible.builtin.debug:
    msg:
      - "Package Name ............................ {{ package_name }}"
      - "Namespace ............................... {{ subscription_namespace }}"
      - "OperatorGroup Exists .................... {{ _og_info.resources | length != 0 }}"
      - "Catalog Source .......................... {{ _source }}"
      - "Catalog Source Namespace ................ {{ _source_namespace }}"
      - "Default Channel ......................... {{ _default_channel }}"
      - "Channel ................................. {{ channel_name }}"
      - "Configuration ........................... {{ subscription_config | default('<undefined>', True) }}"

- name: "Create_subscription: Create {{ package_name }} subscription in {{ subscription_namespace }}"
  kubernetes.core.k8s:
    template: "templates/common/subscription.yml.j2"
    wait: yes
    wait_timeout: 120


# 5. Wait for InstallPlan to complete
# -----------------------------------------------------------------------------
- name: "Create_subscription : Lookup InstallPlan"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ subscription_namespace }}"
    label_selectors:
      - operators.coreos.com/{{ package_name }}.{{ subscription_namespace }}
  register: _installplan_info
  retries: 30
  delay: 60 # Retry for approx 30 minutes (60s * 30 attempts) before giving up
  until: _installplan_info.resources | length > 0

- name: "Create_subscription : Wait for InstallPlan to complete"
  when: _installplan_info.resources[0].status.phase != "Complete"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ _installplan_info.resources[0].metadata.name }}"
    namespace: "{{ subscription_namespace }}"
  register: _installplan_info
  retries: 20
  delay: 30 # Retry for approx 10 minutes (20s * 30 attempts) before giving up
  until:
    - _installplan_info.resources[0].status.phase is defined
    - _installplan_info.resources[0].status.phase == "Complete"
