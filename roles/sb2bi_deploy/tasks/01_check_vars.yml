---
- name: Check for required environment variables
  ansible.builtin.assert:
    that:
      # Sterling B2B
      - lookup('env', 'SI_INSTANCEID') != ""
      # IBM Registry
      - lookup('env', 'ENTITLED_REGISTRY_KEY') != ""
    fail_msg: "One or more required environment variables are not defined"

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail si_instanceid is 'not provided' or 'has uppercase characters'"
  ansible.builtin.assert:
    that:
      - si_instanceid is defined and si_instanceid != ""
      - si_instanceid is match('[a-z0-9-]+')
    fail_msg: "Property 'si_instanceid' is greater than 8 character long or has uppercase characters"

- name: "Fail if entitled_registry_key is not provided"
  ansible.builtin.assert:
    that: entitled_registry_key is defined and entitled_registry_key != ""
    fail_msg: "entitled_registry_key property is required"

# Check Supported version
# -----------------------------------------------------------------------------
- name: Get Cluster information
  kubernetes.core.k8s_cluster_info:
  register: k8s_cluster_info

- name: Extract Kubernetes version number
  ansible.builtin.set_fact:
    k8s_version: "{{ k8s_cluster_info.version.server.kubernetes.major }}.{{ k8s_cluster_info.version.server.kubernetes.minor }}"

- name: Debug
  ansible.builtin.debug:
    msg:
      - "SI version  ...................... {{ si_version }}"
      - "  K8s Min version ................ >= {{ compatibility_matrix[si_version].k8s_min_version }}"
      - "  K8s Max version ................ <= {{ compatibility_matrix[si_version].k8s_max_version }}"
      - "Kubernetes Cluster version ....... {{ k8s_version }}"

# - name: Ensure Sterling B2B is supported in Kubernetes Cluster
#   ansible.builtin.assert:
#     that:
#       - si_version != ""
#       - k8s_version != ""
#       - "k8s_version is version( compatibility_matrix[si_version].k8s_min_version, '>=')"
#       - "k8s_version is version( compatibility_matrix[si_version].k8s_max_version, '<=')"
#     fail_msg: "Sterling B2B version is NOT supported in current Kubernetes Cluster"
#   when: not si_skip_helm

# Lookup Namespace availabiity
# -----------------------------------------------------------------------------
- name: Lookup Namespaces
  kubernetes.core.k8s_info:
    kind: Namespace
  register: lookup_namespaces

- name: Create List of Namespaces
  ansible.builtin.set_fact:
    namespace_list: "{{ lookup_namespaces.resources | map(attribute='metadata.name') | list }}"

# 3. Check for DB Information
# -----------------------------------------------------------------------------
- name: Check for DB2 provided namespace
  ansible.builtin.set_fact:
    db2_namespace: "{{ env_db2_namespace }}"
  when:
    - env_db2_namespace is defined and env_db2_namespace != ""
    - env_db2_namespace in namespace_list

- name: Check for DB2 default namespace
  ansible.builtin.set_fact:
    db2_namespace: "{{ si_db2_namespace }}"
  when:
    - db2_namespace == ""
    - si_db2_namespace in namespace_list

- name: "Fail if Database Information is not provided"
  ansible.builtin.assert:
    that:
      - (db2_namespace != "") or (si_dbvendor != "")
    fail_msg: "Database Information property is required"

# 4. Check for MQ Information
# -----------------------------------------------------------------------------
- name: Check for MQ provided namespace
  ansible.builtin.set_fact:
    mq_namespace: "{{ env_mq_namespace }}"
  when:
    - env_mq_namespace is defined and env_mq_namespace != ""
    - env_mq_namespace in namespace_list

- name: Check for MQ default namespace
  ansible.builtin.set_fact:
    mq_namespace: "{{ si_mq_namespace }}"
  when:
    - mq_namespace == ""
    - si_mq_namespace in namespace_list

- name: "Fail if JMS Queue Information is not provided"
  ansible.builtin.assert:
    that:
      - (mq_namespace != "") or (si_jmsuser != "")
    fail_msg: "JMS Queue Information property is required"

# 5. Serial ID
# -----------------------------------------------------------------------------
- name: Unique Id for files
  ansible.builtin.set_fact:
    my_serial: "{{ lookup('password', '/dev/null length=8 chars=ascii_lowercase,digits') }}"

# Debug
# -----------------------------------------------------------------------------
- name: Debug
  ansible.builtin.debug:
    msg:
      - "SI Instance ID  .............. {{ si_instanceid }}"
      - "SI namespace ................. {{ si_namespace }}"
      - "Database Namespace ........... {{ db2_namespace }}"
      - "JMS Queue Namespace .......... {{ mq_namespace }}"
      - "my_serial ...................... {{ my_serial }}"
