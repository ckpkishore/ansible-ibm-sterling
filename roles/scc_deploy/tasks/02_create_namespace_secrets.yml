---
# Create Kubernetes namespace
# -----------------------------------------------------------------------------
- name: "Create namespace for Sterling Control Center"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ scc_namespace }}"
  register: cout

# Create Secrets for IBM Registry
# -----------------------------------------------------------------------------
- name: Create secret content '{{ scc_registry_secret }}'
  no_log: false
  vars:
    entitled_auth_str: "{{ entitled_registry_user }}:{{ entitled_registry_key }}"
    entitled_auth_b64: "{{ entitled_auth_str | b64encode }}"
    content:
      - '{"auths":{"{{ entitled_registry }}":{"username":"{{ entitled_registry_user }}","password":"{{ entitled_registry_key }}",'
      - '"email":"{{ entitled_registry_user }}","auth":"{{ entitled_auth_b64 }}"}'
      - "}"
      - "}"
  ansible.builtin.set_fact:
    new_secret: "{{ content | join('') }}"

- name: "Generate secret '{{ scc_registry_secret }}'"
  no_log: false
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: "{{ scc_registry_secret }}"
        namespace: "{{ scc_namespace }}"
      data:
        .dockerconfigjson: "{{ new_secret | to_json | b64encode }}"
  register: ibm_registry_secret_cout

# Create Certificate for IBM Control Center on Kubernetes
# -----------------------------------------------------------------------------
# - name: Running OpenSSL command
#   ansible.builtin.command:
#     cmd: "openssl req -x509 -sha512 -days 3650 -newkey rsa:2048 -new -nodes -keyout {{ scc_cert_key }} -out {{ scc_cert_crt }} -subj '/CN={{ scc_name }}'"
#   register: cout
#   changed_when: false

# - name: Concat Certificates
#   ansible.builtin.shell:
#     cmd: "cat {{ scc_cert_key }} {{ scc_cert_crt }} > {{ scc_cert_pem }}"
#   changed_when: false
#   when: cout.rc == 0

# keytool -genkeypair -alias youralias -keyalg RSA -keysize 2048
#         -validity 365 -keystore /path/to/keystore.jks
#         -storepass yourpassword -keypass yourkeypassword
#         -dname "CN=yourdomain.com, OU=YourOrg, O=YourCompany, L=YourCity, ST=YourState, C=YourCountry"
#       args:

# keytool -genkeypair -alias mykey -keyalg RSA -keysize 2048 -keypass mykeypass -validity 365 -keystore keystore.jks -storepass mystorepass
# keytool -export -alias mykey -keystore keystore.jks -rfc -file mykey.crt
# keytool -import -trustcacerts -alias mykey -file mykey.crt -keystore truststore.jks -storepass mystorepass

- name: Create Java KeyStore
  ansible.builtin.command:
    cmd: >-
      keytool -genkeypair -keyalg RSA -keysize 2048 -validity 3650 -alias {{ scc_keyalias }}
      -keystore {{ scc_keystore }} -storepass {{ scc_keystore_password }}
      -keypass {{ scc_keystore_password }} -dname "CN={{ scc_name }}"

- name: Export key
  ansible.builtin.command:
    cmd: >-
      keytool -export -alias {{ scc_keyalias }}
      -keystore {{ scc_keystore }} -storepass {{ scc_keystore_password }}
      -rfc -file {{ scc_cert_crt }}

- name: Create Java TrustStore
  ansible.builtin.command:
    cmd: >-
      keytool -import -trustcacerts -noprompt -alias {{ scc_keyalias }}
      -file {{ scc_cert_crt }}
      -keystore {{ scc_truststore }} -storepass {{ scc_truststore_password }}

# Create Certificate for IBM Control Center on Kubernetes
# -----------------------------------------------------------------------------
- name: Create or update Kubernetes secret with certificates files
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ scc_cert_secret }}"
        namespace: "{{ scc_namespace }}"
      data:
        keystore: "{{ lookup('file', scc_keystore) | b64encode }}"
        truststore: "{{ lookup('file', scc_truststore) | b64encode }}"


# For TLS certificate if ingress will be used
# This secret will be created only if Kubernetes Ingress resource needs to be created. Create Kubernetes TLS secret with following command:
# oc create secret tls ibm-sccm-tls --key=<key file path> --cert=<cert file path> -n ibm-scc
