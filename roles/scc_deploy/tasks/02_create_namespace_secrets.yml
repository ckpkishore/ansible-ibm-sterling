---
# Create Kubernetes namespace
# -----------------------------------------------------------------------------
- name: "Create namespace for Sterling Control Center"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ scc_namespace }}"
  register: cout

# Create Secrets for IBM Registry
# -----------------------------------------------------------------------------
- name: Create secret content '{{ scc_registry_secret }}'
  no_log: false
  vars:
    entitled_auth_str: "{{ entitled_registry_user }}:{{ entitled_registry_key }}"
    entitled_auth_b64: "{{ entitled_auth_str | b64encode }}"
    content:
      - '{"auths":{"{{ entitled_registry }}":{"username":"{{ entitled_registry_user }}","password":"{{ entitled_registry_key }}",'
      - '"email":"{{ entitled_registry_user }}","auth":"{{ entitled_auth_b64 }}"}'
      - "}"
      - "}"
  ansible.builtin.set_fact:
    new_secret: "{{ content | join('') }}"

- name: "Generate secret '{{ scc_registry_secret }}'"
  no_log: false
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: "{{ scc_registry_secret }}"
        namespace: "{{ scc_namespace }}"
      data:
        .dockerconfigjson: "{{ new_secret | to_json | b64encode }}"
  register: ibm_registry_secret_cout

# Create Certificate for Connect:Direct on Kubernetes
# -----------------------------------------------------------------------------
- name: Running OpenSSL command
  ansible.builtin.command:
    cmd: "openssl req -x509 -sha512 -days 3650 -newkey rsa:2048 -new -nodes -keyout {{ scc_cert_key }} -out {{ scc_cert_crt }} -subj '/CN={{ scc_nodename }}'"
  register: cout
  changed_when: false

- name: Concat Certificates
  ansible.builtin.shell:
    cmd: "cat {{ scc_cert_key }} {{ scc_cert_crt }} > {{ scc_cert_pem }}"
  changed_when: false
  when: cout.rc == 0

# For keystore and truststore certificate files
# Utilize the following command to create a secret for keystore and truststore certificate files:
# oc create secret generic ibm-sccm-certs-secret --from-file=keystore=<keystore file path> --from-file=truststore=<truststore file path> -n ibm-sccm

# Create Certificate for Connect:Direct on Kubernetes
# -----------------------------------------------------------------------------
- name: Create or update Kubernetes secret with certificates files
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ scc_cert_secret }}"
        namespace: "{{ scc_namespace }}"
      data:
        cdcert.pem: "{{ lookup('file', scc_cert_pem) | b64encode }}"


# For TLS certificate if ingress will be used
# This secret will be created only if Kubernetes Ingress resource needs to be created. Create Kubernetes TLS secret with following command:
# oc create secret tls ibm-sccm-tls --key=<key file path> --cert=<cert file path> -n ibm-sccm