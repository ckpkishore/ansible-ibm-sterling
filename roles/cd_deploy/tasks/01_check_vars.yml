---
- name: Check for required environment variables
  ansible.builtin.assert:
    that:
      # IBM
      - lookup('env', 'ENTITLED_REGISTRY_KEY') != ""
    fail_msg: "One or more required environment variables are not defined"

# Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if cd_namespace is not provided"
  ansible.builtin.assert:
    that: cd_namespace is defined and cd_namespace != ""
    fail_msg: "cd_namespace property is required"

- name: "Fail if cd_nodename is not provided"
  ansible.builtin.assert:
    that: cd_nodename is defined and cd_nodename != ""
    fail_msg: "cd_nodename property is required"

- name: "Fail if cd_nodename is over 15 characters"
  ansible.builtin.assert:
    that: cd_nodename | length <= 15
    fail_msg: "Ensure cd_nodename is not more than 15 chars."

- name: "Fail if cd_nodename has invalid chars"
  ansible.builtin.assert:
    that: cd_nodename | regex_search('^[a-zA-Z0-9\._\-]*$')
    fail_msg: "cd_nodename property has invalid chars"

- name: "Fail if entitled_registry_key is not provided"
  ansible.builtin.assert:
    that: entitled_registry_key is defined and entitled_registry_key != ""
    fail_msg: "entitled_registry_key property is required"

# Serial ID
# -----------------------------------------------------------------------------
- name: Unique Id for files
  ansible.builtin.set_fact:
    my_serial: "{{ lookup('password', '/dev/null length=8 chars=ascii_lowercase,digits') }}"

# Debug
# -----------------------------------------------------------------------------
- name: Debug
  ansible.builtin.debug:
    msg:
      - "Kubernets Namespace ................. {{ cd_namespace }}"
      - "C:D Nodename        ................. {{ cd_nodename }}"
      - "my_serial ........................... {{ my_serial }}"
